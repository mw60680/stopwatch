{"version":3,"sources":["components/Stopwatch.js","components/Wrapper.js","components/controls/TImerControls.js","components/Timer.js","components/Nav.js","App.js","index.js"],"names":["Stopwatch","heading","useState","running","setRunning","startTime","setStartTime","hrs","min","sec","ms","time","setTime","start","stop","reset","lap","buttonDisplay","setButtonDisplay","laps","setLaps","lapsedTime","setLapsedTime","startTimer","Date","now","stopTimer","diff","currentTime","resetTimer","lapTimer","wrapper","item","display","style","updateTime","setTimeout","Math","floor","parseTime","useEffect","className","toLocaleString","minimumIntegerDigits","useGrouping","icon","faPlay","onClick","size","faStop","faRedo","faSyncAlt","length","map","index","defaultProps","control","Timer","mins","secs","initialTime","setInitialTime","runningTime","setRunningTime","freezeInput","setFreezeInput","onChange","event","target","name","newTime","parseInt","value","renderInputField","placeholder","type","max","disabled","Nav","props","e","onSelect","App","initialState","setDisplay","changedDisplay","console","debug","countdown","stopwatch","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPAKMA,EAAY,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAAc,EAIDC,oBAAS,GAJR,mBAIxBC,EAJwB,KAIfC,EAJe,OAKGF,qBALH,mBAKxBG,EALwB,KAKbC,EALa,OAMPJ,mBAAS,CAC7BK,IAAK,EACLC,IAAK,EACLC,IAAK,EACLC,GAAI,IAVuB,mBAMxBC,EANwB,KAMlBC,EANkB,OAYWV,mBAAS,CAC/CW,MAAO,QACPC,KAAM,OACNC,MAAO,OACPC,IAAK,SAhBsB,mBAYxBC,EAZwB,KAYTC,EAZS,OAkBPhB,mBAAS,IAlBF,mBAkBxBiB,EAlBwB,KAkBlBC,EAlBkB,OAmBKlB,mBAAS,GAnBd,mBAmBxBmB,EAnBwB,KAmBZC,EAnBY,KAyBzBC,EAAa,WACfnB,GAAW,GACXE,EAAakB,KAAKC,OAClBP,EAAiB,CAACL,MAAO,OAAQC,KAAM,QAASC,MAAO,OAAQC,IAAK,WAGlEU,EAAY,WACd,IACMC,EADMH,KAAKC,MACEpB,EACnBiB,GAAc,SAACM,GACX,OAAOA,EAAcD,KAEzBvB,GAAW,GACXc,EAAiB,CAACL,MAAO,QAASC,KAAM,OAAQC,MAAO,QAASC,IAAK,UAGnEa,EAAa,WACfjB,EAAQ,CAACL,IAAK,EAAGC,IAAK,EAAGC,IAAK,EAAGC,GAAI,IACrCJ,IACAgB,EAAc,GACdJ,EAAiB,CAACL,MAAO,QAASC,KAAM,OAAQC,MAAO,OAAQC,IAAK,SACpEI,EAAQ,KAGNU,EAAW,WACbV,GAAQ,SAAAD,GAAI,4BAAQA,GAAR,CAAcR,QAKxBoB,EAAU,SAACC,EAAMC,GAAP,OAAmB,qBAAKC,MAAO,CAACD,WAAb,SAAwBD,KAyCrDG,EAAa,WACfC,WAAWxB,EAhBG,WACd,IACMe,EADMH,KAAKC,MACEpB,EAAYgB,EAEzBX,EAAKiB,EAAO,IACZlB,EAAM4B,KAAKC,MAAOX,EAAK,IAAM,IAC7BnB,EAAM6B,KAAKC,MAAQX,EAAK,IAAM,GAAI,IAGxC,MAAO,CAACpB,IAFI8B,KAAKC,MAAQX,EAAK,IAAM,GAAI,IAE3BnB,MAAKC,MAAKC,MAOJ6B,IAAc,KAOrCC,qBAAU,WACNrC,GAAWgC,MACZ,CAACxB,EAAMR,IAiDV,OA5CQ,eAAC,WAAD,WACI,qBAAKsC,UAAU,UAAf,SACI,6BAAMxC,MAEV,sBAAKwC,UAAU,QAAf,UACI,sBAAMA,UAAU,eAAhB,SACK9B,EAAKJ,IAAImC,eAAe,QAAS,CAC9BC,qBAAsB,EACtBC,aAAa,MAGrB,sBAAMH,UAAU,eAAhB,iBACA,sBAAMA,UAAU,eAAhB,SACK9B,EAAKH,IAAIkC,eAAe,QAAS,CAC9BC,qBAAsB,EACtBC,aAAa,MAGrB,sBAAMH,UAAU,eAAhB,iBACA,sBAAMA,UAAU,eAAhB,SACK9B,EAAKF,IAAIiC,eAAe,QAAS,CAC9BC,qBAAsB,EACtBC,aAAa,MAGrB,sBAAMH,UAAU,eAAhB,iBACA,sBAAMA,UAAU,eAAhB,SACK9B,EAAKD,GAAGgC,eAAe,QAAS,CAC7BC,qBAAsB,EACtBC,aAAa,SAIzB,sBAAKH,UAAU,iBAAf,UAvFQV,EAAQ,cAAC,IAAD,CAAiBc,KAAMC,IAAQC,QAASxB,EAAYyB,KAAM,OAAU/B,EAAcJ,OAE3FkB,EAAQ,cAAC,IAAD,CAAiBc,KAAMI,IAAQF,QAASrB,EAAWsB,KAAM,OAAU/B,EAAcH,MAExFiB,EAAQ,cAAC,IAAD,CAAiBc,KAAMK,IAAQH,QAASlB,EAAYmB,KAAM,OAAU/B,EAAcF,OAE5FgB,EAAQ,cAAC,IAAD,CAAiBc,KAAMM,IAAWJ,QAASjB,EAAUkB,KAAM,OAAU/B,EAAcD,QAuFhGG,EAAKiC,OAAS,GAnFnB,qBAAKX,UAAU,YAAf,SAEQtB,EAAKkC,KAAI,SAACrB,EAAMsB,GACZ,OAAQ,gCAAkBA,EAAlB,KAA2BtB,EAAKzB,IAAhC,IAAsCyB,EAAKxB,IAA3C,IAAiDwB,EAAKvB,IAAtD,IAA4DuB,EAAKtB,KAAvD4C,YA+F1CtD,EAAUuD,aAAe,CACrBtD,QAAS,mBAGED,QC5KA+B,EAFC,SAACC,EAAMC,GAAP,OAAmB,qBAAKC,MAAO,CAACD,WAAb,SAAwBD,KCMrDlB,EAAO,SAAC0C,EAASvB,GAAV,OAAsBF,EAAQ,cAAC,IAAD,CAAiBc,KAAMI,IAAQF,QAASS,EAASR,KAAM,OAAUf,IAEtGlB,EAAQ,SAACyC,EAASvB,GAAV,OAAsBF,EAAQ,cAAC,IAAD,CAAiBc,KAAMK,IAAQH,QAASS,EAASR,KAAM,OAAUf,ICJvGwB,EAAQ,SAAC,GAAe,IDAfD,EAASvB,ECARhC,EAAa,EAAbA,QAAa,EACSC,qBADT,mBAClBG,EADkB,KACPC,EADO,OAEDJ,mBAAS,CAC7BK,IAAK,EACLmD,KAAM,EACNC,KAAM,IALe,mBAElBhD,EAFkB,KAEZC,EAFY,OAOaV,qBAPb,mBAOlB0D,EAPkB,KAOLC,EAPK,OAQa3D,mBAASS,GARtB,mBAQlBmD,EARkB,KAQLC,EARK,OASK7D,oBAAS,GATd,mBASlBC,EATkB,KASTC,EATS,OAUaF,oBAAS,GAVtB,mBAUlB8D,EAVkB,KAULC,EAVK,OAWiB/D,mBAAS,CAC/CW,MAAO,QACPC,KAAM,OACNC,MAAO,SAdc,mBAWlBE,EAXkB,KAWHC,EAXG,KAiBnBgD,EAAW,SAACC,GACCA,EAAMC,OAAOC,KAA5B,IACMC,EAAO,eACN3D,GAEP2D,EAAQH,EAAMC,OAAOC,MAAQE,SAASJ,EAAMC,OAAOI,OACnD5D,EAAQ0D,IAGNG,EAAmB,SAACJ,EAAMK,EAAaF,GACzC,OAAO,uBAAOG,KAAK,SAASnE,IAAK,EAAGoE,IAAK,GAAIP,KAAMA,EAAMK,YAAaA,EAAaF,MAAOA,EAAOK,SAAUb,EAAaE,SAAUA,KAyChIxC,EAAY,WACdtB,GAAW,GACXE,IACAY,EAAiB,CAACL,MAAO,QAASC,KAAM,OAAQC,MAAO,WAyCrDoB,EAAa,WACE,IAAbxB,EAAKJ,KAA2B,IAAdI,EAAK+C,MAA4B,IAAd/C,EAAKgD,MAC1CjC,IAEJU,YAAW,WACPxB,EA7BU,WACd,IACMe,EADMH,KAAKC,MACEpB,EAEbI,EAAM4B,KAAKC,MAAOX,EAAK,IAAM,IAC7BnB,EAAM6B,KAAKC,MAAQX,EAAK,IAAM,GAAI,IAClCpB,EAAM8B,KAAKC,MAAQX,EAAK,IAAM,GAAI,IAIlCC,EAAcgC,GAFM,GAANrD,EAAW,GAAa,GAANC,EAAYC,GAUlD,MANgB,CACZF,IAAK8B,KAAKC,MAAOV,EAAY,GAAI,IACjC8B,KAAMrB,KAAKC,MAAOV,EAAY,GAAM,IACpC+B,KAAM/B,EAAc,IAcZW,MACT,KAWP,OARAC,qBAAU,WACNuB,EAAepD,KAChB,CAACA,IAEJ6B,qBAAU,WACNrC,GAAWgC,MACZ,CAAChC,EAAS2D,IAGT,gCACK7D,EAnGD,qBAAKwC,UAAU,QAAf,SACI,iCACKgC,EAAiB,MAAO,QAAS9D,EAAKJ,IAAImC,eAAe,QAAS,CAC/DC,qBAAsB,EACtBC,aAAa,KAEhB6B,EAAiB,OAAQ,UAAW9D,EAAK+C,KAAKhB,eAAe,QAAS,CACnEC,qBAAsB,EACtBC,aAAa,KAEhB6B,EAAiB,OAAQ,UAAW9D,EAAKgD,KAAKjB,eAAe,QAAS,CACnEC,qBAAsB,EACtBC,aAAa,UAyFzB,sBAAKH,UAAU,iBAAf,WDrIGe,EC0DQ,WANZ7C,EAAKJ,IAAM,GAAKI,EAAK+C,KAAO,GAAK/C,EAAKgD,KAAO,IAQ5CM,GAAe,GACfJ,EAA4B,GAAXlD,EAAKJ,IAAW,GAAmB,GAAZI,EAAK+C,KAAc/C,EAAKgD,MAChEvD,GAAW,IACVC,GAAaC,EAAakB,KAAKC,OAChCP,EAAiB,CAACL,MAAO,OAAQC,KAAM,QAASC,MAAO,YDhE3CkB,ECsIWhB,EAAcJ,MDtIbkB,EAAQ,cAAC,IAAD,CAAiBc,KAAMC,IAAQC,QAASS,EAASR,KAAM,OAAUf,ICuI5FnB,EAAKY,EAAWT,EAAcH,MAC9BC,GA9DM,WACfkD,GAAe,GACfvC,IACAR,EAAiB,CAACL,MAAO,QAASC,KAAM,OAAQC,MAAO,SACvDH,EAAQ,CACJL,IAAK,EACLmD,KAAM,EACNC,KAAM,MAuDiB1C,EAAcF,cAajD0C,EAAMF,aAAe,CACjBtD,QAAS,aAGEwD,QCzIAqB,EAjBH,SAAAC,GACR,OACI,mCACI,qBAAKhC,QAAS,SAACiC,GAAD,OAAOD,EAAME,SAAS,cAAcZ,KAAM,YAAxD,uBAGA,qBAAKtB,QAAS,SAACiC,GAAD,OAAOD,EAAME,SAAS,cAAcZ,KAAM,YAAxD,2BCwBGa,MAzBf,WACE,IAAMC,EAAe,CACnB,UAAa,OACb,UAAa,QAHF,EAKiBjF,mBAAS,2BAAIiF,GAAL,IAAmB,UAAa,WALzD,mBAKNlD,EALM,KAKGmD,EALH,KAcb,OACE,eAAC,WAAD,WACE,cAAC,EAAD,CAAKH,SATQ,SAACb,GAChB,IAAMiB,EAAiBF,EACvBG,QAAQC,MAAMnB,GACdiB,EAAejB,GAAU,QACzBgB,EAAWC,MAMT,sBAAK5C,UAAU,kBAAf,UACIV,EAAQ,cAAC,EAAD,IAAWE,EAAQuD,WAC3BzD,EAAQ,cAAC,EAAD,IAAeE,EAAQwD,kBCtBzCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.d426cf06.chunk.js","sourcesContent":["import React, { Fragment, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlay, faStop, faRedo, faSyncAlt } from '@fortawesome/free-solid-svg-icons';\n\nconst Stopwatch = ({ heading }) => {\n    /**\n     * States used in the function\n     */\n    const [running, setRunning] = useState(false);\n    const [startTime, setStartTime] = useState();\n    const [time, setTime] = useState({\n        hrs: 0,\n        min: 0,\n        sec: 0,\n        ms: 0\n    });\n    const [buttonDisplay, setButtonDisplay] = useState({\n        start: 'block',\n        stop: 'none',\n        reset: 'none',\n        lap: 'none'\n    });\n    const [laps, setLaps] = useState([]);\n    const [lapsedTime, setLapsedTime] = useState(0);\n    // end of states\n\n    /**\n     * Stopwatch control functions\n     */\n    const startTimer = () => {\n        setRunning(true);\n        setStartTime(Date.now());\n        setButtonDisplay({start: 'none', stop: 'block', reset: 'none', lap: 'block'});\n    }\n\n    const stopTimer = () => {\n        const now = Date.now();\n        const diff = now - startTime;\n        setLapsedTime((currentTime) => {\n            return currentTime + diff;\n        });\n        setRunning(false);\n        setButtonDisplay({start: 'block', stop: 'none', reset: 'block', lap: 'none'});\n    }\n\n    const resetTimer = () => {\n        setTime({hrs: 0, min: 0, sec: 0, ms: 0})\n        setStartTime();\n        setLapsedTime(0);\n        setButtonDisplay({start: 'block', stop: 'none', reset: 'none', lap: 'none'});\n        setLaps([]);\n    }\n\n    const lapTimer = () => {\n        setLaps(laps => [...laps, time]);\n    }\n    // End of stopwatch control functions\n\n    // Component render functions\n    const wrapper = (item, display) => <div style={{display}}>{item}</div>;\n\n    const start = () => wrapper(<FontAwesomeIcon icon={faPlay} onClick={startTimer} size={'2x'} />, buttonDisplay.start);\n\n    const stop = () => wrapper(<FontAwesomeIcon icon={faStop} onClick={stopTimer} size={'2x'} />, buttonDisplay.stop);\n\n    const reset = () => wrapper(<FontAwesomeIcon icon={faRedo} onClick={resetTimer} size={'2x'} />, buttonDisplay.reset);\n\n    const lap = () => wrapper(<FontAwesomeIcon icon={faSyncAlt} onClick={lapTimer} size={'2x'} />, buttonDisplay.lap);\n\n    const lapTimes = () => {\n        return (\n            <div className='lap-times'>\n                {\n                    laps.map((item, index) => {\n                        return (<div key={index}>{index}. {item.hrs}:{item.min}:{item.sec}:{item.ms}</div>)\n                    })\n                }\n            </div>\n        );\n    };\n    // End of component rendering\n\n    /**\n     * Convert system time to object {hrs, min, sec, ms}\n     */\n    const parseTime = () => {\n        const now = Date.now();\n        const diff = now - startTime + lapsedTime;\n\n        const ms = diff % 1000;\n        const sec = Math.floor((diff/1000)%60);\n        const min = Math.floor(((diff/1000)/60)%60);\n        const hrs = Math.floor(((diff/1000)/60)/60);\n\n        return {hrs, min, sec, ms};\n    }\n\n    /**\n     * update time to be displayed\n     */\n    const updateTime = () => {\n        setTimeout(setTime(parseTime()), 10);\n    }\n\n    /**\n     * create repeat rendering to update timer on screen\n     * Dependency array - time state and timer running flag\n     */\n    useEffect(() => {\n        running && updateTime();\n    }, [time, running]);\n    \n    // main export function\n    const timer = () => {\n        return (\n            <Fragment>\n                <div className='heading'>\n                    <h1>{ heading }</h1>\n                </div>\n                <div className='timer'>\n                    <span className='timer-values'>\n                        {time.hrs.toLocaleString('en-US', {\n                            minimumIntegerDigits: 2,\n                            useGrouping: false\n                        })}\n                    </span>\n                    <span className='timer-values'> : </span>\n                    <span className='timer-values'>\n                        {time.min.toLocaleString('en-US', {\n                            minimumIntegerDigits: 2,\n                            useGrouping: false\n                        })}\n                    </span>\n                    <span className='timer-values'> : </span>\n                    <span className='timer-values'>\n                        {time.sec.toLocaleString('en-US', {\n                            minimumIntegerDigits: 2,\n                            useGrouping: false\n                        })}\n                    </span>\n                    <span className='timer-values'> : </span>\n                    <span className='timer-values'>\n                        {time.ms.toLocaleString('en-US', {\n                            minimumIntegerDigits: 3,\n                            useGrouping: false\n                        })}\n                    </span>\n                </div>\n                <div className='timer-controls'>\n                    {start()}\n                    {stop()}\n                    {reset()}\n                    {lap()}\n                </div>\n                {laps.length > 0 && lapTimes()}\n            </Fragment>\n        );\n    }\n\n    return timer();\n}\n\nStopwatch.propTypes = {\n    /**\n     * Heading for the component - Timer heading\n     */\n    heading: PropTypes.string,\n};\n\nStopwatch.defaultProps = {\n    heading: 'Stopwatch Timer'\n};\n\nexport default Stopwatch;\n","const wrapper = (item, display) => <div style={{display}}>{item}</div>;\n\nexport default wrapper;\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlay, faStop, faRedo, faSyncAlt } from '@fortawesome/free-solid-svg-icons';\nimport wrapper from '../Wrapper'\n\nconst start = (control, display) => wrapper(<FontAwesomeIcon icon={faPlay} onClick={control} size={'2x'} />, display);\n\nconst stop = (control, display) => wrapper(<FontAwesomeIcon icon={faStop} onClick={control} size={'2x'} />, display);\n\nconst reset = (control, display) => wrapper(<FontAwesomeIcon icon={faRedo} onClick={control} size={'2x'} />, display);\n\nconst lap = (control, display) => wrapper(<FontAwesomeIcon icon={faSyncAlt} onClick={control} size={'2x'} />, display);\n\nexport {\n    start,\n    stop,\n    reset,\n    lap\n};\n","import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { reset, start, stop } from './controls'\n\nconst Timer = ({heading}) => {\n    const [startTime, setStartTime] = useState();\n    const [time, setTime] = useState({\n        hrs: 0,\n        mins: 0,\n        secs: 0\n    });\n    const [initialTime, setInitialTime] = useState();\n    const [runningTime, setRunningTime] = useState(time);\n    const [running, setRunning] = useState(false);\n    const [freezeInput, setFreezeInput] = useState(false);\n    const [buttonDisplay, setButtonDisplay] = useState({\n        start: 'block',\n        stop: 'none',\n        reset: 'none',\n    });\n\n    const onChange = (event) => {\n        const target = event.target.name\n        const newTime = {\n            ...time\n        }\n        newTime[event.target.name] = parseInt(event.target.value);\n        setTime(newTime)\n    }\n\n    const renderInputField = (name, placeholder, value) => {\n        return <input type='number' min={0} max={60} name={name} placeholder={placeholder} value={value} disabled={freezeInput} onChange={onChange} />\n    }\n\n    const inputTime = () => {\n        return (\n            <div className='timer'>\n                <form>\n                    {renderInputField('hrs', 'Hours', time.hrs.toLocaleString('en-US', {\n                        minimumIntegerDigits: 2,\n                        useGrouping: false\n                    }))}\n                    {renderInputField('mins', 'Minutes', time.mins.toLocaleString('en-US', {\n                        minimumIntegerDigits: 2,\n                        useGrouping: false\n                    }))}\n                    {renderInputField('secs', 'Seconds', time.secs.toLocaleString('en-US', {\n                        minimumIntegerDigits: 2,\n                        useGrouping: false\n                    }))}\n                </form>\n            </div>\n        );\n    };\n\n    const checkValidTime = () => {\n        if(time.hrs < 1 && time.mins < 1 && time.secs < 1) {\n            return false;\n        }\n        return true;\n    }\n\n    const startTimer = () => {\n        if(checkValidTime()) {\n            setFreezeInput(true);\n            setInitialTime(((time.hrs * 60 * 60) + (time.mins * 60) + (time.secs)));\n            setRunning(true);\n            !startTime && setStartTime(Date.now());\n            setButtonDisplay({start: 'none', stop: 'block', reset: 'block'});\n        }\n    }\n\n    const stopTimer = () => {\n        setRunning(false);\n        setStartTime();\n        setButtonDisplay({start: 'block', stop: 'none', reset: 'block'});\n    }\n\n    const resetTimer = () => {\n        setFreezeInput(false);\n        stopTimer();\n        setButtonDisplay({start: 'block', stop: 'none', reset: 'none'});\n        setTime({\n            hrs: 0,\n            mins: 0,\n            secs: 0\n        });\n    }\n\n    /**\n     * Convert system time to object {hrs, min, sec, ms}\n     */\n    const parseTime = () => {\n        const now = Date.now();\n        const diff = now - startTime;\n\n        const sec = Math.floor((diff/1000)%60);\n        const min = Math.floor(((diff/1000)/60)%60);\n        const hrs = Math.floor(((diff/1000)/60)/60);\n\n        const lapsedTime = (hrs * 60 * 60) + (min * 60) + sec;\n\n        const currentTime = initialTime - lapsedTime;\n\n        const newTime = {\n            hrs: Math.floor((currentTime/60)/60),\n            mins: Math.floor((currentTime/60) % 60),\n            secs: currentTime % 60\n        }\n\n        return newTime;\n    }\n\n    /**\n     * update time to be displayed\n     */\n    const updateTime = () => {\n        if (time.hrs === 0 && time.mins === 0 && time.secs === 0) {\n            stopTimer();\n        }\n        setTimeout(() => {\n            setTime(parseTime());\n        }, 10);\n    }\n\n    useEffect(() => {\n        setRunningTime(time);\n    }, [time])\n\n    useEffect(() => {\n        running && updateTime();\n    }, [running, runningTime]);\n\n    return (\n        <div>\n            {heading}\n            {inputTime()}\n            <div className='timer-controls'>\n                {start(startTimer, buttonDisplay.start)}\n                {stop(stopTimer, buttonDisplay.stop)}\n                {reset(resetTimer, buttonDisplay.reset)}\n            </div>\n        </div>\n    )\n}\n\nTimer.propTypes = {\n    /**\n     * Heading for the component\n     */\n    heading: PropTypes.string,\n};\n\nTimer.defaultProps = {\n    heading: 'Countdown'\n};\n\nexport default Timer;\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Nav = props => {\n    return (\n        <header>\n            <div onClick={(e) => props.onSelect('stopwatch')} name={'stopwatch'}>\n                Stopwatch\n            </div>\n            <div onClick={(e) => props.onSelect('countdown')} name={'countdown'}>\n                Countdown\n            </div>\n        </header>\n    )\n}\n\nNav.propTypes = {\n    onSelect: PropTypes.func.isRequired,\n}\n\nexport default Nav\n","import './App.css';\nimport './components/Stopwatch'\nimport Stopwatch from './components/Stopwatch';\nimport Timer from './components/Timer';\nimport Nav from './components/Nav';\nimport { Fragment, useState, useEffect } from 'react';\nimport wrapper from './components/Wrapper'\n\nfunction App() {\n  const initialState = {\n    'countdown': 'none',\n    'stopwatch': 'none'\n  };\n  const [display, setDisplay] = useState({...initialState, 'stopwatch': 'block'});\n\n  const navigate = (target) => {\n    const changedDisplay = initialState;\n    console.debug(target);\n    changedDisplay[target] = 'block';\n    setDisplay(changedDisplay);\n  }\n\n  return (\n    <Fragment>\n      <Nav onSelect={navigate} />\n      <div className='timer-container'>\n        { wrapper(<Timer />, display.countdown) }\n        { wrapper(<Stopwatch />, display.stopwatch) }\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}